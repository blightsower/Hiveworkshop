library Auramancer
//-----------------------------------------------------------------------
// Auramancer v1.2
// Author: Blightsower
//
// DESCRIPTION:
// A buff system that assigns bonuses to a specific buff designed to work
// with normal de/buffs and de/buffs provided by auras. 
//
// HOW TO USE: Just call the function below at map initialization. 
//
// API:
// call AuraRegister.registerAura(BUFF_ID, ABILITY_ID)
// 
// Expectation from the system:
// Whenever a unit gains the specific BUFF_ID, the system adds the ABILITY_ID
// to the unit and removes it when the unit loses  the de/buff. ABILITY_ID will get 
// disabled by the system when the ability is registered.
//
// With this approach, we avoid writing codes that calculates distances when creating custom auras 
// and instead leverage the game's existing aura system and we only need to account for the event
// where a unit gains or loses a de/buff.We do not care where the buff is coming from, what we care 
// is that the unit has a buff and we are going to give it the bonuses that it needs.
//
// Expectation from the users:
// Each BUFF_ID and ABILITY_ID must be unique to prevent unwanted results and 
// all bonuses must come in a form of spell book.
//
// Important Note:
// Buffs from auras with different ids will cause the buffs of different auras to stack 
// on the same unit just like how the game implements it.
//
// You will need to tune the value of the timerInterval if you intend to have a lot of buffs in your
// map. A lower number entails that the system will immediately update the bonuses granted by your
// registered aura at that interval times the number of other buffs registered into the system.
// 
// To save computing power, the system computes one buff per timer iteration as recommended by Antares.
//
//---------------------------------------------------------------
// Requirements:
//  - Enable JassHelper
//
// How to enable JassHelper
//  - In the Trigger Editor window, look for the menu labeled JassHelper
//    and click Enable JassHelper
//-------------------------------------------------------------------------
// HOW TO IMPORT: 
//  - Copy and paste Auramancer to your map
// 
// ADDITIONAL IMPORT (to guarantee that the system will not break)
// 
// IMPORT UNIT INDEXER (if you don't already have one in your map)
//  - Go to the main window of the world editor then click on file-> preferences-> general then check the checkbox labeled automatically create unknown variable while pasting trigger
//  - Copy the whole folder of Bribe's Unit Indexer
//
//-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    // CONFIGURATION
    //-----------------------------------------------------------------------
    globals
        private real timerInterval = .1 
        private real auramancerStartDelay = 0.
    endglobals
    //-----------------------------------------------------------------------
    // END OF CONFIGURATION
    //-----------------------------------------------------------------------

    private module CircularLinkedList
        readonly thistype next
        readonly thistype prev

        method init takes nothing returns thistype
            set next = this
            set prev = this

            return this
        endmethod

        method pushBack takes thistype node returns thistype
            set node.prev = prev
            set node.next = this
            set prev.next = node
            set prev = node

            return node
        endmethod

        method pushFront takes thistype node returns thistype
            set node.prev = this
            set node.next = next
            set next.prev = node
            set next = node

            return node
        endmethod

        method pop takes nothing returns nothing
            set prev.next = next
            set next.prev = prev
        endmethod
    endmodule

    module Auramancer
        implement CircularLinkedList
        private integer buffId
        private integer bonusId
        private group buffGroup = CreateGroup()

        private static timer auraTimer = CreateTimer()
        private static group g = CreateGroup()
        private static rect r
        private static thistype curr = 0

        private static method auraLoop takes nothing returns nothing
            
            local thistype this = curr 
            local unit u
            local integer buffLevel
            set g = GetUnitsInRectMatching(r, null)
            loop 
                set u = FirstOfGroup(g)
                exitwhen u == null
                set buffLevel = GetUnitAbilityLevel(u, .buffId)
                if buffLevel > 0 then 
                    if not(IsUnitInGroup(u, .buffGroup)) then
          
                        call UnitAddAbility(u, .bonusId)
                        call GroupAddUnit(.buffGroup , u)
                    endif
                elseif IsUnitInGroup(u, .buffGroup) then
                    
	            call UnitRemoveAbility(u, .bonusId)
                    call GroupRemoveUnit(.buffGroup , u)
                endif
                call GroupRemoveUnit(g,u)
            endloop
            set curr = curr.next

        endmethod
 
        private static method disableAbility takes integer a returns nothing
            local integer i = 1
            loop
                exitwhen i > 24
                call SetPlayerAbilityAvailableBJ( false, a, ConvertedPlayer(i))
                set i = i + 1
            endloop
        endmethod

        static method register takes integer boof, integer bonus returns nothing
            local thistype this = thistype.allocate()

            set .buffId = boof
            set .bonusId = bonus
            call disableAbility(.bonusId)
            if curr == 0 then
            
                call this.init()  
                set curr = this  
            else
            
                call curr.pushBack(this)  
            endif

        endmethod
         
        static method auramancerTimerStart takes nothing returns nothing
            set .r = GetPlayableMapRect()
            call TimerStart(auraTimer, timerInterval, true, function thistype.auraLoop)
        endmethod

    endmodule
 
    struct Auramancer
        implement Auramancer
 
        private static method auramancerDelayedStart takes nothing returns nothing
            call auramancerTimerStart()
        endmethod

        static method onInit takes nothing returns nothing
            local trigger t = CreateTrigger()
            call TriggerRegisterTimerEventSingle(t, auramancerStartDelay)
            call TriggerAddAction(t, function thistype.auramancerDelayedStart)
            set t = null
        endmethod

    endstruct

endlibrary
